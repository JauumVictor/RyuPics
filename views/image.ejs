<!doctype html>
<html lang="pt-BR">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />

    <!-- Facebook Meta Tags -->
    <meta name="theme-color" content="#2b2d31" />
    <meta property="og:type" content="website" />
    <meta property="og:site_name" content="ðŸ“¸ âœ¦ <%= uploads %> uploads" />
    <meta property="og:image" content="<%= image %>" />
    <meta property="og:url" content="https://pics.ryuzaki.cloud/" />
    <meta property="og:title" content="Ryu da brenda" />
    <meta name="pubdate" content="<%= date %>" />

    <!-- Twitter Meta Tags -->
    <meta name="twitter:card" content="summary_large_image" />
    <meta property="twitter:domain" content="https://pics.ryuzaki.cloud/" />
    <meta name="twitter:image" content="<%= image %>" />
    <meta property="twitter:url" content="https://pics.ryuzaki.cloud/" />
    <meta name="twitter:title" content="Ryu da brenda" />

    <link type="application/json+oembed" href="/embed.json" />
    <link rel="stylesheet" href="/css/image.css" />

    <title><%= title %></title>
  </head>
  <body>
    <div class="zoom-container" id="zoom-target">
      <img src="<%= image %>" alt="<%= title %>" />
    </div>

    <script>
      document.addEventListener("DOMContentLoaded", function () {
        if (window.innerWidth > 768) {
          const zoomContainer = document.getElementById("zoom-target");
          const zoomedImage = document.querySelector("img");
          let isZoomed = false;
          let startPanX, startPanY;

          zoomedImage.addEventListener("click", toggleZoom);
          zoomContainer.addEventListener("mousemove", panImage);

          function toggleZoom() {
            isZoomed = !isZoomed;
            zoomedImage.classList.toggle("zoomed", isZoomed);

            resetPan();
          }

          function panImage(e) {
            if (isZoomed) {
              const { clientX, clientY } = e;
              const deltaX = startPanX - clientX;
              const deltaY = startPanY - clientY;

              zoomedImage.style.transformOrigin = `${deltaX}px ${deltaY}px`;
              zoomedImage.style.transform = `scale(2) translate(${deltaX}px, ${deltaY}px)`;
            }
          }

          function resetPan() {
            if (!isZoomed) {
              zoomedImage.style.transformOrigin = "";
              zoomedImage.style.transform = "";
            } else {
              const { width, height } = zoomedImage.getBoundingClientRect();

              startPanX = (width - zoomContainer.clientWidth) / 2;
              startPanY = (height - zoomContainer.clientHeight) / 2;
            }
          }

          window.addEventListener("beforeunload", function () {
            const imageId = "<%- title %>";

            fetch(`/delete/${imageId}`, {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify({ imageId }),
            })
              .then((response) => response.text())
              .then((data) => console.log(data))
              .catch((error) => console.error("Error:", error));
          });
        }
      });
    </script>
  </body>
</html>
